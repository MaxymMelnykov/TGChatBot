from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from Container import *
from config import *
from user_data import *


def create_main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('üõí–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω—å', callback_data='config'),
    )
    markup.row(

        types.InlineKeyboardButton('üåê–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥', url='https://els.systems/katalog/'),
        types.InlineKeyboardButton('‚ÅâÔ∏è–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è', callback_data='help')
    )
    return markup


def create_help_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, (text, _) in QUESTIONS.items():
        markup.add(types.InlineKeyboardButton(text, callback_data=key))
    markup.add(types.InlineKeyboardButton('‚òéÔ∏è–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤`—è–∑–æ–∫', callback_data='contacts'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='start'))
    return markup


def create_get_ra_name_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton('–ü—ñ–¥–∑–µ–º–Ω–∏–π', callback_data='–ü—ñ–¥–∑–µ–º–Ω–∏–π'))
    markup.add(types.InlineKeyboardButton('–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π', callback_data='–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π'))
    return markup


def create_config_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ–∫—É–ø–µ—Ü—å
    markup.add(types.InlineKeyboardButton('–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –ø–æ–∫—É–ø–µ—Ü—å', callback_data='customer'))
    # –ñ–ö
    markup.add(types.InlineKeyboardButton('–ó–∞–±—É–¥–æ–≤–Ω–∏–∫', callback_data='ra'))
    return markup


def create_config_customer_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    names = set()
    containers = Container.get_containers()
    for container in containers:
        if container.container_name not in names:
            names.add(container.container_name)
            markup.add(types.InlineKeyboardButton(container.container_name, callback_data=container.container_name))
    return markup


def create_sensor_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(types.InlineKeyboardButton('‚úÖ –ü–æ—Ç—Ä—ñ–±–Ω–∞', callback_data='true'),
               types.InlineKeyboardButton('‚ùå –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞', callback_data='false'))
    return markup


def create_contacts_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton('üó∫–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ –º–∞–ø—ñ',
                                          url='https://www.google.com/maps/place/Boryspilska+St,+9/@50.4296885,30.6636144,18.25z/data=!4m7!3m6!1s0x40d4c5213495e2fd:0x38eb621a82251730!4b1!8m2!3d50.4295865!4d30.6634792!16s%2Fg%2F11fx8hp_71?entry=ttu'))
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='start'))
    return markup


def create_faq_markup():
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton('‚óÄÔ∏è–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='help'))
    markup.add(types.InlineKeyboardButton('‚è™–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='start'))
    return markup


def create_type_markup(container_name):
    if container_name == '–ü—ñ–¥–∑–µ–º–Ω–∏–π' or container_name == '–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π' or container_name == '–î–ª—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –≤—ñ–¥—Ö–æ–¥—ñ–≤':
        markup = types.InlineKeyboardMarkup(row_width=3)
    elif container_name == '–°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∏–π':
        markup = types.InlineKeyboardMarkup(row_width=2)
    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
    container_types = Container.get_types_by_name(container_name)
    buttons = [types.InlineKeyboardButton(text=container_type, callback_data=container_type) for container_type in
               container_types]
    markup.add(*buttons)
    return markup


def create_order_navigation_markup(message_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    if user_data[message_id]['user_type'] == 'customer':
        markup.add(types.InlineKeyboardButton('‚ûï –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='customer'))
        markup.add(types.InlineKeyboardButton('‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='customer_end'))
    else:
        markup.add(types.InlineKeyboardButton('‚ûï –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='ar_additional_order'))
        markup.add(types.InlineKeyboardButton('‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='customer_end'))
    return markup


def create_material_markup(container_name):
    markup = types.InlineKeyboardMarkup(row_width=1)
    materials = Container.get_materials_by_name(container_name)
    for material in materials:
        markup.add(types.InlineKeyboardButton(material, callback_data=material))
    return markup

def create_main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton('üö™ –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'))
    return markup

