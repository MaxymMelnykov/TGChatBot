from telebot import types

from config import QUESTIONS
from Container import Container
from user_data import user_data


def create_main_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üõí –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω—å", callback_data="config")
    ),
    markup.add(
        types.InlineKeyboardButton(
            "üåê –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", url="https://els.systems/katalog/"
        )
    ),
    markup.add(
        types.InlineKeyboardButton("‚ÅâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="help")
    )
    return markup


def create_help_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏, —â–æ –º—ñ—Å—Ç–∏—Ç—å –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –∫–Ω–æ–ø–∫–∏.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, (text, _) in QUESTIONS.items():
        markup.add(types.InlineKeyboardButton(text, callback_data=key))
    markup.add(
        types.InlineKeyboardButton("‚òéÔ∏è –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤`—è–∑–æ–∫", callback_data="contacts")
    )
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="start"))
    return markup


def create_get_ra_name_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø—ñ–¥–∑–µ–º–Ω–∏–π –∞–±–æ –Ω–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π).

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ü—ñ–¥–∑–µ–º–Ω–∏–π", callback_data="–ü—ñ–¥–∑–µ–º–Ω–∏–π"))
    markup.add(
        types.InlineKeyboardButton("–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π", callback_data="–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π")
    )
    return markup


def create_config_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø—Ä–∏–≤–∞—Ç–Ω–∏–π –ø–æ–∫—É–ø–µ—Ü—å –∞–±–æ –∑–∞–±—É–¥–æ–≤–Ω–∏–∫).

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    # –ó–≤–∏—á–∞–π–Ω–∏–π –ø–æ–∫—É–ø–µ—Ü—å
    markup.add(
        types.InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç–Ω–∏–π –ø–æ–∫—É–ø–µ—Ü—å", callback_data="customer")
    )
    # –ñ–ö
    markup.add(types.InlineKeyboardButton("–ó–∞–±—É–¥–æ–≤–Ω–∏–∫", callback_data="ra"))
    return markup


def create_config_customer_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    names = set()
    containers = Container.get_containers()
    for container in containers:
        if container.container_name not in names:
            names.add(container.container_name)
            markup.add(
                types.InlineKeyboardButton(
                    container.container_name, callback_data=container.container_name
                )
            )
    return markup


def create_sensor_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å–µ–Ω—Å–æ—Ä–∞ (–ø–æ—Ç—Ä—ñ–±–µ–Ω —á–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω).

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Å–µ–Ω—Å–æ—Ä–∞.
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ—Ç—Ä—ñ–±–Ω–∞", callback_data="true"),
        types.InlineKeyboardButton("‚ùå –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞", callback_data="false"),
    )
    return markup


def create_contacts_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –¥–æ–ø–æ–º–æ–≥–∏.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            "üó∫ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ –º–∞–ø—ñ",
            url="https://www.google.com/maps/place/Boryspilska+St,+9/@50.4296885,30.6636144,18.25z/data=!4m7!3m6!1s0x40d4c5213495e2fd:0x38eb621a82251730!4b1!8m2!3d50.4295865!4d30.6634792!16s%2Fg%2F11fx8hp_71?entry=ttu",
        )
    )
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="help"))
    markup.add(
        types.InlineKeyboardButton("‚è™ –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="start")
    )
    return markup


def create_faq_markup():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è FAQ.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="help"))
    markup.add(
        types.InlineKeyboardButton("‚è™ –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="start")
    )
    return markup


def create_type_markup(container_name):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ –Ω–∞–∑–≤–∏.

    Args:
        container_name (str): –ù–∞–∑–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    """
    if (
        container_name == "–ü—ñ–¥–∑–µ–º–Ω–∏–π"
        or container_name == "–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π"
        or container_name == "–î–ª—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –≤—ñ–¥—Ö–æ–¥—ñ–≤"
    ):
        markup = types.InlineKeyboardMarkup(row_width=3)
    elif container_name == "–°–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∏–π":
        markup = types.InlineKeyboardMarkup(row_width=2)
    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
    container_types = Container.get_types_by_name(container_name)
    buttons = [
        types.InlineKeyboardButton(text=container_type, callback_data=container_type)
        for container_type in container_types
    ]
    markup.add(*buttons)
    return markup


def create_order_navigation_markup(message_id):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        message_id (int): ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    if user_data[message_id]["user_type"] == "customer":
        markup.add(
            types.InlineKeyboardButton(
                "‚ûï –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="customer"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="customer_end"
            )
        )
    else:
        markup.add(
            types.InlineKeyboardButton(
                "‚ûï –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="ar_additional_order"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="customer_end"
            )
        )
    return markup


def create_material_markup(container_name):
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ –Ω–∞–∑–≤–∏.

    Args:
        container_name (str): –ù–∞–∑–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.

    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    materials = Container.get_materials_by_name(container_name)
    for material in materials:
        markup.add(types.InlineKeyboardButton(material, callback_data=material))
    return markup


def create_main_menu_keyboard():
    """
    –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Returns:
        types.ReplyKeyboardMarkup: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("üö™ –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"))
    return markup
