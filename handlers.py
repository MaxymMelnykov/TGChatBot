from markups import *
from utils import *


def get_ra_area(message):
    user_id = message.chat.id
    if message.text is not None:
        try:
            area = float(message.text)
            user_data[user_id]['area'] = area
            bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä:")
            bot.register_next_step_handler(message, get_ra_apartments)
        except ValueError:
            bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
            bot.register_next_step_handler(message, get_ra_area)
    else:
        bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        bot.register_next_step_handler(message, get_ra_area)


def get_ra_apartments(message):
    user_id = message.chat.id
    if message.text is not None:
        try:
            apartments = int(message.text)
            user_data[user_id]['apartments'] = apartments
            calculate_ra_volume_count(user_id)
            send_photos_with_message(user_id, [Container.get_photo_by_name('–ü—ñ–¥–∑–µ–º–Ω–∏–π'),
                                               Container.get_photo_by_name('–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π')],
                                     caption=f'–î–ª—è –≤–∞—à–æ–≥–æ –ñ–ö –ø–æ—Ç—Ä—ñ–±–Ω–æ {ceil(calculate_ra_volume_count(user_id))} –º^3 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤. –í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
                                     reply_markup=create_get_ra_name_markup())
        except ValueError:
            bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
            bot.register_next_step_handler(message, get_ra_apartments)
    else:
        bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        bot.register_next_step_handler(message, get_ra_area)


def get_quantity(message):
    message_id = message.chat.id
    quantity_text = message.text

    try:
        quantity = int(quantity_text)
        user_data[message_id]['container_quantity'] = quantity

        container_volume_needed_for_ra = user_data[message_id]['container_calc_res_ra']

        user_type = user_data[message_id]['user_type']

        container_name = user_data[message_id]['container_name']

        container_type = user_data[message_id]['container_type']

        container_volume = Container.get_volume_by_type(container_type)

        container_material = user_data[message_id]['container_material']

        container_photo_path = Container.get_photo_by_type(container_type)

        container_underground_sensor = user_data[message_id]['container_underground_sensor']

        user_data[message_id]['container_volume_of_all_orders'] += quantity * container_volume
        container_volume_of_all_orders = user_data[message_id]['container_volume_of_all_orders']

        if not container_photo_path:
            raise FileNotFoundError("No photo path found for container.")

        with open(container_photo_path, 'rb') as container_photo:
            if container_name == '–ü—ñ–¥–∑–µ–º–Ω–∏–π' or container_name == '–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π':
                price_per_unit = Container.get_price_of_container_by_all_data(container_name, container_type,
                                                                              container_material)
            else:
                price_per_unit = Container.get_price_by_type(container_type)

            sensor_cost = 200
            if container_underground_sensor:
                price_per_unit += sensor_cost
            sensor_message = '‚úÖ'
            if not container_underground_sensor:
                sensor_message = '‚ùå'

            total_price = quantity * price_per_unit
            container_volume_need_more = ceil(container_volume_needed_for_ra - container_volume_of_all_orders)
            message_text = (
                f"{f'‚ùóÔ∏è<strong>–î–ª—è –≤–∞—à–æ–≥–æ –ñ–ö –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {container_volume_need_more} –º¬≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤, –±–∞–∂–∞—î—Ç–µ –¥–æ–∑–∞–º–æ–≤–∏—Ç–∏?</strong>\n' if user_type == 'ra' and container_volume_need_more > 0 else ''}"
                f"<b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
                f"üóë <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b> {container_name}\n"
                f"üè∑ <b>–¢–∏–ø:</b> {container_type}\n"
                f"{f'üß±<b>–ú–∞—Ç–µ—Ä—ñ–∞–ª:</b> {container_material}\n' if container_name in ['–ü—ñ–¥–∑–µ–º–Ω–∏–π', '–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π'] else ''}"
                f"{f'üì°<b>–°–µ–Ω—Å–æ—Ä:</b> {sensor_message}\n' if container_name == '–ü—ñ–¥–∑–µ–º–Ω–∏–π' else ''}"
                f"1Ô∏è‚É£<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ</b>: {price_per_unit}\n"
                f"üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {quantity} —à—Ç.\n"
                f"üíµ <b>–°—É–º–∞:</b> {total_price} –≥—Ä–Ω\n"
            )

            bot.send_photo(message_id, container_photo, message_text,
                           reply_markup=create_order_navigation_markup(message_id), parse_mode='html')
            user_data[message_id]['total_sum'] += total_price
            user_data[message_id]['orders'].append({
                'container_name': container_name,
                'container_type': container_type,
                'container_material': container_material,
                'container_underground_sensor': container_underground_sensor,
                'quantity': quantity,
                'total_price': total_price,
                'photo': container_photo_path,
            })


    except FileNotFoundError as e:
        bot.send_message(message_id, str(e))
    except ValueError:
        bot.send_message(message_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.')
        bot.register_next_step_handler(message, get_quantity)


def get_all_purchases(callback):
    message_id = callback.message.chat.id
    orders = user_data[message_id].get('orders', [])

    if not isinstance(orders, list):
        bot.send_message(message_id, "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    container_names = []
    container_types = []
    container_materials = []
    container_sensors = []
    container_photos = []
    container_quantities = []
    total_sum = user_data[message_id]['total_sum']

    for order in orders:
        container_names.append(order['container_name'])
        container_types.append(order['container_type'])
        container_materials.append(order['container_material'])
        container_sensors.append(order['container_underground_sensor'])
        container_quantities.append(order['quantity'])
        container_photos.append(order['photo'])

    notify_admin(callback, orders)

    message_lines = [
        f"<b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>",
        f"<b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b> {total_sum} –≥—Ä–Ω",
        "-----------------------------------------------"
    ]

    for idx, order in enumerate(orders, start=1):
        if order['container_name'] == '–ü—ñ–¥–∑–µ–º–Ω–∏–π':
            if order['container_underground_sensor']:
                sensor_message = '‚úÖ'
            else:
                sensor_message = '‚ùå'
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:  {order['container_name']}\n"
                f"üè∑–¢–∏–ø:  {order['container_type']}\n"
                f"üß±–ú–∞—Ç–µ—Ä—ñ–∞–ª:  {order['container_material']}\n"
                f"üì°–°–µ–Ω—Å–æ—Ä:  {sensor_message}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['total_price'] / order['quantity']} –≥—Ä–Ω\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å:  {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞:  {order['total_price']} –≥—Ä–Ω\n"
                '-----------------------------------------------'
            )
        elif order['container_name'] == '–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π':
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:  {order['container_name']}\n"
                f"üè∑–¢–∏–ø:  {order['container_type']}\n"
                f"üß±–ú–∞—Ç–µ—Ä—ñ–∞–ª:  {order['container_material']}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:  {order['total_price'] / order['quantity']} –≥—Ä–Ω\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å:  {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞:  {order['total_price']} –≥—Ä–Ω\n"
                '-----------------------------------------------'
            )
        else:
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:  {order['container_name']}\n"
                f"üè∑–¢–∏–ø:  {order['container_type']}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:  {order['total_price'] / order['quantity']} –≥—Ä–Ω\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å:  {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞:  {order['total_price']} –≥—Ä–Ω\n"
                '-----------------------------------------------')

    message = "\n".join(message_lines)
    bot.send_message(message_id, message, parse_mode='html')

    clear_user_data(message_id)


# –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
def notify_admin(callback, orders):
    message_id = callback.message.chat.id

    user_id = callback.message.chat.id
    user_username = callback.from_user.username
    user_name = callback.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–µ'

    total_sum = user_data[message_id]['total_sum']
    message_lines = [
        f"<b>üö® –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ üö®</b>\n"
        f"<b>üÜîID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: </b> {user_id}\n"
        f"<b>üë§–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: </b> {user_name}\n"
        f"<b>üìßUsername –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: </b> @{user_username}\n",
        f"<b>üíµ–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b> {total_sum} –≥—Ä–Ω",
        "-----------------------------------------------"
    ]

    for idx, order in enumerate(orders, start=1):
        if order['container_name'] == '–ü—ñ–¥–∑–µ–º–Ω–∏–π':
            if order['container_underground_sensor']:
                sensor_message = '‚úÖ'
            else:
                sensor_message = '‚ùå'
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['container_name']}\n"
                f"üè∑–¢–∏–ø: {order['container_type']}\n"
                f"üß±–ú–∞—Ç–µ—Ä—ñ–∞–ª: {order['container_material']}\n"
                f"üì°–°–µ–Ω—Å–æ—Ä: {sensor_message}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['total_price'] / order['quantity']} –≥—Ä–Ω\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞: {order['total_price']} –≥—Ä–Ω\n"
                '-----------------------------------------------'
            )
        elif order['container_name'] == '–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π':
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['container_name']}\n"
                f"üè∑–¢–∏–ø: {order['container_type']}\n"
                f"üß±–ú–∞—Ç–µ—Ä—ñ–∞–ª: {order['container_material']}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['total_price'] / order['quantity']} –≥—Ä–Ω\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞: {order['total_price']} –≥—Ä–Ω\n"
                '-----------------------------------------------'
            )
        else:
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['container_name']}\n"
                f"üè∑–¢–∏–ø: {order['container_type']}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['total_price'] / order['quantity']} –≥—Ä–Ω\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞: {order['total_price']} –≥—Ä–Ω\n"
                '-----------------------------------------------')

    message = "\n".join(message_lines)

    bot.send_message(ADMIN_ID, message, parse_mode='HTML')
