from datetime import datetime

from numpy import ceil

from config import (
    ADMIN_ID,
    CONFIG_RA_APARTMENTS_MESSAGE,
    START_MESSAGE,
    TYPE_ERROR_MESSAGE,
    VALUE_ERROR_MESSAGE,
    bot,
)
from Container import Container
from logger import logger
from markups import (
    create_get_ra_name_markup,
    create_main_markup,
    create_main_menu_keyboard,
    create_order_navigation_markup,
)
from user_data import user_data
from utils import calculate_ra_volume_count, clear_user_data, send_photos_with_message


def get_ra_area(message):
    """
    –û—Ç—Ä–∏–º—É—î –ø–ª–æ—â—É –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–≤–∞—Ä—Ç–∏—Ä.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å –ø–ª–æ—â—É –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è.

    Returns:
        - –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω—É –ø–ª–æ—â—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É.
        - –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ, –∑'—è–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """
    user_id = message.chat.id
    try:
        area = float(message.text)
        user_data[user_id]["area"] = area
        bot.send_message(user_id, CONFIG_RA_APARTMENTS_MESSAGE)
        bot.register_next_step_handler(message, get_ra_apartments)
        logger.info(f"[{user_id}] –í–≤–µ–¥–µ–Ω–∞ –ø–ª–æ—â–∞: {area}")
    except ValueError:
        bot.send_message(user_id, VALUE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_ra_area)
        logger.exception(f"[{user_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ: {message.text}")
    except TypeError:
        bot.send_message(user_id, TYPE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_ra_area)
        logger.exception(f"[{user_id}] TypeError –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–Ω—ñ –ø–ª–æ—â—ñ: {message.text}")


def get_ra_apartments(message):
    """
    –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –æ–±—á–∏—Å–ª—é—î –æ–±—Å—è–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–ª—è –ñ–ö.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä.

    Returns:
        - –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É.
        - –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ, –∑'—è–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """
    message_id = message.chat.id
    try:
        apartments = int(message.text)
        user_data[message_id]["apartments"] = apartments
        logger.info(f"[{message_id}] –í–≤–µ–¥–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä: {apartments}")

        volume = calculate_ra_volume_count(message_id)
        logger.info(f"[{message_id}] –û–±—á–∏—Å–ª–µ–Ω–∏–π –æ–±'—î–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è –ñ–ö: {volume} –º¬≥")
        send_photos_with_message(
            message_id,
            [
                Container.get_photo_by_name("–ü—ñ–¥–∑–µ–º–Ω–∏–π"),
                Container.get_photo_by_name("–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π"),
            ],
            caption=f"–î–ª—è –≤–∞—à–æ–≥–æ –ñ–ö –ø–æ—Ç—Ä—ñ–±–Ω–æ <strong>{ceil(volume)} –º¬≥</strong> –æ–±`—î–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤.\n"
                    f"–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
            reply_markup=create_get_ra_name_markup(),
        )
    except ValueError:
        bot.send_message(message_id, VALUE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_ra_apartments)
        logger.exception(f"[{message_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä: {message.text}")
    except TypeError:
        bot.send_message(message_id, TYPE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_ra_apartments)
        logger.exeption(f"[{message_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä: {message.text}")


def get_wall_width(message):
    """
    –û—Ç—Ä–∏–º—É—î —Ç–æ–≤—â–∏–Ω—É —Å—Ç—ñ–Ω–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ–≤—â–∏–Ω—É —Å—Ç—ñ–Ω–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.

    Returns:
        - –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–æ–∫, —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å–∏—Ç—å –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–æ–≤—É.
        - –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤.
    """
    message_id = message.chat.id
    try:
        width = int(message.text)
        if width < 2 or width > 5:
            bot.send_message(
                message_id,
                "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É —Ç–æ–≤—â–∏–Ω—É —Å—Ç—ñ–Ω–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤.\n"
                "‚úçüèª –í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É —Ç–æ–≤—â–∏–Ω—É —Å—Ç—ñ–Ω–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:",
            )
            bot.register_next_step_handler(message, get_wall_width)
            logger.warning(f"[{message_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏: {width}")
        else:
            user_data[message_id]["container_width"] = width
            logger.info(f"[{message_id}] –í–≤–µ–¥–µ–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏: {width}")
            bot.send_message(
                message_id, "‚úçüèª –í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: "
            )
            bot.register_next_step_handler(message, get_quantity)
    except ValueError:
        bot.send_message(message_id, VALUE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_wall_width)
        logger.exception(f"[{message_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏ {message.text}")
    except TypeError:
        bot.send_message(message_id, TYPE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_wall_width)
        logger.exception(f"[{message_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ç–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏ {message.text}")


def get_quantity(message):
    """
    –û—Ç—Ä–∏–º—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –æ–±—á–∏—Å–ª—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤.

    Returns:
        - –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤, —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        - –Ø–∫—â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞, –∑'—è–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """
    message_id = message.chat.id
    quantity_text = message.text
    try:
        quantity = int(quantity_text)
        logger.info(f"[{message_id} –≤–≤–µ–¥–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: {message.text}]")
        user_data[message_id]["container_quantity"] = quantity

        container_volume_needed_for_ra = user_data[message_id]["container_calc_res_ra"]

        user_type = user_data[message_id]["user_type"]

        container_name = user_data[message_id]["container_name"]

        container_type = user_data[message_id]["container_type"]

        container_volume = Container.get_volume_by_type(container_type)

        container_material = user_data[message_id]["container_material"]

        container_photo_path = Container.get_photo_by_name(container_name)

        container_underground_sensor = user_data[message_id][
            "container_underground_sensor"
        ]

        container_width = user_data[message_id]["container_width"]

        user_data[message_id]["container_volume_of_all_orders"] += (
                quantity * container_volume
        )
        container_volume_of_all_orders = user_data[message_id][
            "container_volume_of_all_orders"
        ]

        if not container_photo_path:
            logger.critical(f"[{message_id} –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤]")
            raise FileNotFoundError("No photo path found for container.")

        with open(container_photo_path, "rb") as container_photo:
            if container_name == "–ü—ñ–¥–∑–µ–º–Ω–∏–π" or container_name == "–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π":
                price_per_unit = Container.get_price_of_container_by_all_data(
                    container_name, container_type, container_material
                )
            else:
                price_per_unit = Container.get_price_by_type(container_type)
            if container_name == "–ü—ñ–¥–∑–µ–º–Ω–∏–π":
                sensor_cost = 335
                if container_underground_sensor:
                    sensor_message = "‚úÖ"
                if not container_underground_sensor:
                    sensor_message = "‚ùå"
                    price_per_unit -= sensor_cost

            total_price = quantity * price_per_unit
            container_volume_need_more = ceil(
                container_volume_needed_for_ra - container_volume_of_all_orders
            )
            optional_message = (
                f"‚ùóÔ∏è<strong>–î–ª—è –≤–∞—à–æ–≥–æ –ñ–ö –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {container_volume_need_more} –º¬≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤, –±–∞–∂–∞—î—Ç–µ –¥–æ–∑–∞–º–æ–≤–∏—Ç–∏?</strong>\n\n"
                if user_type == "ra" and container_volume_need_more > 0
                else ""
            )
            material_message = (
                f"üß±<b>–ú–∞—Ç–µ—Ä—ñ–∞–ª:</b> {container_material}\n"
                if container_name in ["–ü—ñ–¥–∑–µ–º–Ω–∏–π", "–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π"]
                else ""
            )
            sensor_message_text = (
                f"üì°<b>–°–µ–Ω—Å–æ—Ä:</b> {sensor_message}\n"
                if container_name == "–ü—ñ–¥–∑–µ–º–Ω–∏–π"
                else ""
            )
            width_message = (
                f"üìè<b>–¢–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏:</b> {container_width}\n"
                if container_width > 0
                else ""
            )

            # –ó–±–∏—Ä–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
            message_text = (
                f"{optional_message}"
                f"<b>–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä –¥–æ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n"
                f"<b>–¢–æ–≤–∞—Ä:</b>\n"
                f"üóë <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b> {container_name}\n"
                f"üè∑ <b>–¢–∏–ø:</b> {container_type}\n"
                f"{material_message}"
                f"{sensor_message_text}"
                f"{width_message}"
                f"1Ô∏è‚É£<b>–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ</b>: {price_per_unit}\n"
                f"üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> {quantity} —à—Ç.\n"
                f"üíµ <b>–°—É–º–∞:</b> {total_price} $\n\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ ‚ûï –î–æ–ø–æ–≤–Ω–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∞–±–æ ‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –π–æ–≥–æ."
            )

            bot.send_photo(
                message_id,
                container_photo,
                message_text,
                reply_markup=create_order_navigation_markup(message_id),
                parse_mode="html",
            )
            user_data[message_id]["total_sum"] += total_price
            user_data[message_id]["orders"].append(
                {
                    "container_name": container_name,
                    "container_type": container_type,
                    "container_material": container_material,
                    "container_underground_sensor": container_underground_sensor,
                    "container_width": container_width,
                    "quantity": quantity,
                    "total_price": total_price,
                    "photo": container_photo_path,
                }
            )
            user_data[message_id]["container_width"] = 0

    except FileNotFoundError as e:
        bot.send_message(message_id, str(e))
        logger.critical(f"[{message_id} —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ {str(e)}]")
    except ValueError:
        bot.send_message(message_id, VALUE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_quantity)
        logger.exception(f"[{message_id} –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ {message.text}]")
    except TypeError:
        bot.send_message(message_id, TYPE_ERROR_MESSAGE)
        bot.register_next_step_handler(message, get_quantity)
        logger.exception(f"[{message_id} –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ {message.text}]")


def get_all_purchases(message):
    """
    –í–∏–≤–æ–¥–∏—Ç—å –≤—Å—ñ –ø–æ–∫—É–ø–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Returns:
        - –Ø–∫—â–æ –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ notify_admin.
        - –Ø–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ - –≤–∏–≤–æ–¥–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """
    message_id = message.chat.id
    orders = user_data[message_id].get("orders", [])
    if not isinstance(orders, list):
        bot.send_message(message_id, "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    container_names = []
    container_types = []
    container_materials = []
    container_sensors = []
    container_widths = []
    container_photos = []
    container_quantities = []
    total_sum = user_data[message_id]["total_sum"]

    for order in orders:
        container_names.append(order["container_name"])
        container_types.append(order["container_type"])
        container_materials.append(order["container_material"])
        container_sensors.append(order["container_underground_sensor"])
        container_widths.append(order["container_width"])
        container_quantities.append(order["quantity"])
        container_photos.append(order["photo"])

    notify_admin(message, orders)

    message_lines = [
        "<b>üéâ–í—ñ—Ç–∞—î–º–æ, –í–∏ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n"
        "<b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>",
        f"<b>üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b> –≤—ñ–¥ {total_sum} $",
        "----------------------------------------",
    ]

    for idx, order in enumerate(orders, start=1):
        if order["container_name"] == "–ü—ñ–¥–∑–µ–º–Ω–∏–π":
            if order["container_underground_sensor"]:
                sensor_message = "‚úÖ"
            else:
                sensor_message = "‚ùå"
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b>  {order['container_name']}\n"
                f"üè∑ <b>–¢–∏–ø:</b>  {order['container_type']}\n"
                f"üß± <b>–ú–∞—Ç–µ—Ä—ñ–∞–ª:</b>  {order['container_material']}\n"
                f"üì° <b>–°–µ–Ω—Å–æ—Ä:</b>  {sensor_message}\n"
                f"1Ô∏è‚É£ <b>–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b> –≤—ñ–¥ {order['total_price'] / order['quantity']} $\n"
                f"üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b>  {order['quantity']} —à—Ç.\n"
                f"üíµ <b>–°—É–º–∞:</b>  –≤—ñ–¥ {order['total_price']} $\n"
                "----------------------------------------"
            )
        elif order["container_name"] == "–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π":
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b>  {order['container_name']}\n"
                f"üè∑ <b>–¢–∏–ø:</b>  {order['container_type']}\n"
                f"üß± <b>–ú–∞—Ç–µ—Ä—ñ–∞–ª:</b>  {order['container_material']}\n"
                f"1Ô∏è‚É£ <b>–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b> –≤—ñ–¥ {order['total_price'] / order['quantity']} $\n"
                f"üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b>  {order['quantity']} —à—Ç.\n"
                f"üíµ <b>–°—É–º–∞:</b>  –≤—ñ–¥ {order['total_price']} $\n"
                "----------------------------------------"
            )
        else:
            container_width_text = (
                f"üìè <b>–¢–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏:</b> {order['container_width']}\n"
                if order["container_width"] > 0
                else ""
            )

            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b>  {order['container_name']}\n"
                f"üè∑ <b>–¢–∏–ø:</b>  {order['container_type']}\n"
                f"{container_width_text}"
                f"1Ô∏è‚É£ <b>–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b> –≤—ñ–¥ {order['total_price'] / order['quantity']} $\n"
                f"üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b>  {order['quantity']} —à—Ç.\n"
                f"üíµ <b>–°—É–º–∞:</b>  –≤—ñ–¥ {order['total_price']} $\n"
                "----------------------------------------"
            )

            message_lines.append(
                '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üö™ –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.'
            )
    message = "\n".join(message_lines)
    send_photos_with_message(
        message_id, container_photos, message, create_main_menu_keyboard()
    )

    clear_user_data(message_id)


@bot.message_handler(regexp="^üö™ –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é$")
def handle_main_menu(message):
    """
    –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Returns:
        - –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é(—á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü—ñ—é send_main_menu).
    """
    message_id = message.chat.id
    send_main_menu(message_id)


def send_main_menu(user_id):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.

    Args:
        user_id (int): ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.

    Returns:
        - –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    bot.send_message(
        user_id, START_MESSAGE, reply_markup=create_main_markup(), parse_mode="HTML"
    )


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    phone_number = message.contact.phone_number
    user_name = message.contact.first_name

    user_data[message.chat.id]["telephone_number"] = phone_number
    user_data[message.chat.id]["name"] = user_name

    get_all_purchases(message)


def collect_error_steps(message):
    user_data[message.chat.id] = {'steps': message.text}
    msg = bot.send_message(message.chat.id, "–Ø–∫—É –û–° / –ø—Ä–∏—Å—Ç—Ä—ñ–π –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ?")
    bot.register_next_step_handler(msg, collect_error_system)


def collect_error_system(message):
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {}
    user_data[message.chat.id]['system'] = message.text
    msg = bot.send_message(message.chat.id, "–ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ –Ω–∞–ø–∏—â—ñ—Ç—å –±—É–¥—å-—â–æ.")
    bot.register_next_step_handler(msg, collect_error_screenshot)


def collect_error_screenshot(message):
    error = user_data.get(message.chat.id, {
        'steps': '–Ω–µ–≤—ñ–¥–æ–º–æ',
        'system': '–Ω–µ–≤—ñ–¥–æ–º–æ',
    })

    try:
        if message.content_type == 'photo':
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            screenshot_path = f"resources/errors/{message.chat.id}_{datetime.now().isoformat().replace(':', '-')}.jpg"

            with open(screenshot_path, 'wb') as f:
                f.write(downloaded_file)

            error['screenshot'] = screenshot_path
        else:
            error['screenshot'] = '–Ω–µ –Ω–∞–¥–∞–Ω–æ'

        log_msg = (
            f"[USER ERROR REPORT] ID: {message.chat.id}\n"
            f"Steps: {error.get('steps')}\n"
            f"System: {error.get('system')}\n"
            f"Screenshot: {error.get('screenshot')}"
        )
        logger.error(log_msg)
        bot.send_message(message.chat.id, "‚úÖ –î—è–∫—É—î–º–æ! –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.")
        bot.send_message(ADMIN_ID, log_msg)

    except Exception:
        logger.exception(f"[ERROR REPORT FAIL] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Å–∫–∞—Ä–≥—É –≤—ñ–¥ {message.chat.id}")
        bot.send_message(message.chat.id,
                         "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")


def notify_admin(message, orders):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–µ –º—ñ—Å—Ç–∏—Ç—å –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        orders (list): –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤, —â–æ –≤–∫–ª—é—á–∞—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Ç–∞ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å.

    Returns:
        - –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç–∞ –π–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.
    """
    message_id = message.chat.id

    user_id = message.chat.id
    user_name = user_data[message.chat.id]["name"]
    user_telephone_number = user_data[message_id]["telephone_number"]
    total_sum = user_data[message_id]["total_sum"]
    message_lines = [
        f"<b>üö® –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ üö®</b>\n"
        f"<b>üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: </b> {user_id}\n"
        f"<b>üë§ –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: </b> {user_name}\n"
        f"<b>üì± –ú–æ–± —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: </b> {user_telephone_number}\n",
        f"<b>üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</b> –≤—ñ–¥ {total_sum} $",
        "-----------------------------------------",
    ]

    for idx, order in enumerate(orders, start=1):
        if order["container_name"] == "–ü—ñ–¥–∑–µ–º–Ω–∏–π":
            if order["container_underground_sensor"]:
                sensor_message = "‚úÖ"
            else:
                sensor_message = "‚ùå"
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['container_name']}\n"
                f"üè∑ –¢–∏–ø: {order['container_type']}\n"
                f"üß± –ú–∞—Ç–µ—Ä—ñ–∞–ª: {order['container_material']}\n"
                f"üì° –°–µ–Ω—Å–æ—Ä: {sensor_message}\n"
                f"1Ô∏è‚É£ –¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –≤—ñ–¥ {order['total_price'] / order['quantity']} $\n"
                f"üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order['quantity']} —à—Ç.\n"
                f"üíµ –°—É–º–∞: –≤—ñ–¥ {order['total_price']} $\n"
                "-----------------------------------------"
            )
        elif order["container_name"] == "–ù–∞–ø—ñ–≤–ø—ñ–¥–∑–µ–º–Ω–∏–π":
            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {order['container_name']}\n"
                f"üè∑–¢–∏–ø: {order['container_type']}\n"
                f"üß±–ú–∞—Ç–µ—Ä—ñ–∞–ª: {order['container_material']}\n"
                f"1Ô∏è‚É£–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –≤—ñ–¥ {order['total_price'] / order['quantity']} $\n"
                f"üî¢–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {order['quantity']} —à—Ç.\n"
                f"üíµ–°—É–º–∞: –≤—ñ–¥ {order['total_price']} $\n"
                "-----------------------------------------"
            )
        else:
            container_width_text = (
                f"üìè <b>–¢–æ–≤—â–∏–Ω–∞ —Å—Ç—ñ–Ω–∫–∏:</b> {order['container_width']}\n"
                if order["container_width"] > 0
                else ""
            )

            message_lines.append(
                f"‚Ññ{idx}:\n"
                f"üóë <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b>  {order['container_name']}\n"
                f"üè∑ <b>–¢–∏–ø:</b>  {order['container_type']}\n"
                f"{container_width_text}"
                f"1Ô∏è‚É£ <b>–¶—ñ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:</b> –≤—ñ–¥ {order['total_price'] / order['quantity']} $\n"
                f"üî¢ <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b>  {order['quantity']} —à—Ç.\n"
                f"üíµ <b>–°—É–º–∞:</b>  –≤—ñ–¥ {order['total_price']} $\n"
                "----------------------------------------"
            )

    message = "\n".join(message_lines)
    bot.send_message(ADMIN_ID, message, parse_mode="HTML")
    logger.info(f'[{message_id} –ú–µ–Ω–µ–¥–∂–µ—Ä—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message}]')
    # bot.send_message(ADMIN_ID_SECOND, message, parse_mode='HTML')
